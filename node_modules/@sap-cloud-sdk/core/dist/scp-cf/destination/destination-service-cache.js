"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.destinationServiceCache = void 0;
var cache_1 = require("../cache");
var destination_cache_1 = require("./destination-cache");
var DestinationServiceCache = function (cache) { return ({
    retrieveDestinationsFromCache: function (targetUrl, decodedJwt, isolationStrategty) {
        return cache.get(getDestinationCacheKeyService(targetUrl, decodedJwt, isolationStrategty));
    },
    cacheRetrievedDestinations: function (destinationServiceUri, decodedJwt, destinations, isolationStrategty) {
        var key = getDestinationCacheKeyService(destinationServiceUri, decodedJwt, isolationStrategty);
        cache.set(key, destinations);
    },
    clear: function () {
        cache.clear();
    },
    getCacheInstance: function () { return cache; }
}); };
// The destination service Uri contains the destination name (single request) or the instance/subaccount information for get all request
// The used isolation strategty is either Tenant or Tenat_User because we want to get results for subaccount and provider tenants which rules out no-isolation or user islation
function getDestinationCacheKeyService(destinationServiceUri, decodedJwt, isolationStrategty) {
    var usedIsolationStrategy = isolationStrategty === cache_1.IsolationStrategy.Tenant ||
        isolationStrategty === cache_1.IsolationStrategy.Tenant_User
        ? isolationStrategty
        : cache_1.IsolationStrategy.Tenant;
    return destination_cache_1.getDestinationCacheKey(decodedJwt, destinationServiceUri, usedIsolationStrategy);
}
exports.destinationServiceCache = DestinationServiceCache(new cache_1.Cache({ hours: 0, minutes: 5, seconds: 0 }));
//# sourceMappingURL=destination-service-cache.js.map