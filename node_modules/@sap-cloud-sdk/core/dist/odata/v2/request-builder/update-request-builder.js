"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateRequestBuilder = exports.UpdateRequestBuilderV2 = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var request_builder_base_1 = require("../../common/request-builder/request-builder-base");
var odata_update_request_config_1 = require("../../common/request/odata-update-request-config");
var entity_serializer_1 = require("../entity-serializer");
var uri_conversion_1 = require("../uri-conversion");
var entity_deserializer_1 = require("../../common/entity-deserializer");
var extract_odata_etag_1 = require("../extract-odata-etag");
var properties_util_1 = require("../../../util/properties-util");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'update-request-builder-v2'
});
/**
 * Create OData query to update an entity.
 *
 * @typeparam EntityT - Type of the entity to be updated
 */
var UpdateRequestBuilderV2 = /** @class */ (function (_super) {
    __extends(UpdateRequestBuilderV2, _super);
    /**
     * Creates an instance of UpdateRequestBuilder.
     *
     * @param _entityConstructor - Constructor type of the entity to be updated
     * @param _entity - Entity to be updated
     */
    function UpdateRequestBuilderV2(_entityConstructor, _entity) {
        var _this = _super.call(this, new odata_update_request_config_1.ODataUpdateRequestConfig(_entityConstructor, uri_conversion_1.oDataUriV2)) || this;
        _this._entityConstructor = _entityConstructor;
        _this._entity = _entity;
        _this.requestConfig.eTag = _entity.versionIdentifier;
        _this.required = new Set();
        _this.ignored = new Set();
        _this.requestConfig.keys = uri_conversion_1.oDataUriV2.getEntityKeys(_this._entity, _this._entityConstructor);
        _this.requestConfig.payload = _this.getPayload();
        return _this;
    }
    Object.defineProperty(UpdateRequestBuilderV2.prototype, "entity", {
        get: function () {
            return this._entity;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @deprecated Since v1.29.0. This method should never be called, it has severe side effects.
     * Builds the payload and the entity keys of the query.
     * @returns the builder itself
     */
    UpdateRequestBuilderV2.prototype.prepare = function () {
        this.requestConfig.keys = uri_conversion_1.oDataUriV2.getEntityKeys(this._entity, this._entityConstructor);
        this.requestConfig.payload = this.getPayload();
        return this;
    };
    /**
     * Executes the query.
     *
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to the entity once it was updated
     */
    UpdateRequestBuilderV2.prototype.execute = function (destination, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.isEmptyObject(this.requestConfig.payload)) {
                    return [2 /*return*/, this._entity];
                }
                return [2 /*return*/, (this.build(destination, options)
                        .then(function (request) {
                        return warnIfNavigation(request, _this._entity, _this._entityConstructor);
                    })
                        .then(function (request) { return request.execute(); })
                        // Update returns 204 hence the data from the request is used to build entity for return
                        .then(function (response) {
                        var eTag = entity_deserializer_1.extractEtagFromHeader(response.headers) ||
                            extract_odata_etag_1.extractODataEtagV2(response.data) ||
                            _this.requestConfig.eTag;
                        return _this._entity
                            .setOrInitializeRemoteState()
                            .setVersionIdentifier(eTag);
                    })
                        .catch(function (error) {
                        return Promise.reject(util_1.errorWithCause('OData update request failed!', error));
                    }))];
            });
        });
    };
    /**
     * Explicitly configure 'PUT' as the method of the update request. By default, only the properties that have changed compared to the last known remote state are sent using 'PATCH', while with 'PUT', the whole entity is sent.
     *
     * @returns The entity itself, to facilitate method chaining
     */
    UpdateRequestBuilderV2.prototype.replaceWholeEntityWithPut = function () {
        this.requestConfig.updateWithPut();
        this.requestConfig.payload = this.getPayload();
        return this;
    };
    /**
     * Specifies required entity keys for the update request.
     *
     * @param fields - Enumeration of the fields to be required
     * @returns The entity itself, to facilitate method chaining
     */
    UpdateRequestBuilderV2.prototype.requiredFields = function () {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        this.required = this.toSet.apply(this, fields);
        this.requestConfig.payload = this.getPayload();
        return this;
    };
    /**
     * Specifies entity fields to ignore by the update request.
     *
     * @param fields - Enumeration of the fields to be ignored
     * @returns The entity itself, to facilitate method chaining
     */
    UpdateRequestBuilderV2.prototype.ignoredFields = function () {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        this.ignored = this.toSet.apply(this, fields);
        this.requestConfig.payload = this.getPayload();
        return this;
    };
    /**
     * Instructs the request to force an overwrite of the entity by sending an 'If-Match: *' header instead of sending the ETag version identifier.
     *
     * @returns this The request itself to ease chaining while executing the request
     */
    UpdateRequestBuilderV2.prototype.ignoreVersionIdentifier = function () {
        this.requestConfig.versionIdentifierIgnored = true;
        return this;
    };
    /**
     * Specifies a custom ETag version identifier of the entity to update.
     *
     * @param etag - Custom ETag version identifier to be sent in the header of the request
     * @returns The request itself to ease chaining while executing the request
     */
    UpdateRequestBuilderV2.prototype.withCustomVersionIdentifier = function (etag) {
        this.requestConfig.eTag = etag;
        return this;
    };
    UpdateRequestBuilderV2.prototype.getPayload = function () {
        var serializedBody = entity_serializer_1.serializeEntityV2(this._entity, this._entityConstructor);
        if (this.requestConfig.method === 'patch') {
            var body = this.serializedDiff();
            body = this.removeNavPropsAndComplexTypes(body);
            body = this.removeKeyFields(body);
            body = this.addRequiredFields(serializedBody, body);
            body = this.removeIgnoredFields(body);
            return body;
        }
        return serializedBody;
    };
    UpdateRequestBuilderV2.prototype.serializedDiff = function () {
        return __assign(__assign({}, entity_serializer_1.serializeEntityNonCustomFieldsV2(this._entity.getUpdatedProperties(), this._entityConstructor)), this._entity.getUpdatedCustomFields());
    };
    UpdateRequestBuilderV2.prototype.removeNavPropsAndComplexTypes = function (body) {
        return removePropertyOnCondition(function (_a) {
            var key = _a[0], val = _a[1];
            return typeof val === 'object';
        })(body);
    };
    UpdateRequestBuilderV2.prototype.removeKeyFields = function (body) {
        var _this = this;
        return removePropertyOnCondition(function (_a) {
            var key = _a[0], val = _a[1];
            return _this.getKeyFieldNames().includes(key);
        })(body);
    };
    UpdateRequestBuilderV2.prototype.removeIgnoredFields = function (body) {
        var _this = this;
        return removePropertyOnCondition(function (_a) {
            var key = _a[0], val = _a[1];
            return _this.ignored.has(key);
        })(body);
    };
    UpdateRequestBuilderV2.prototype.addRequiredFields = function (completeBody, body) {
        return Array.from(this.required).reduce(function (resultBody, requiredField) {
            var _a;
            if (Object.keys(resultBody).includes(requiredField)) {
                return resultBody;
            }
            return __assign(__assign({}, resultBody), (_a = {}, _a[requiredField] = completeBody[requiredField], _a));
        }, body);
    };
    UpdateRequestBuilderV2.prototype.getKeyFieldNames = function () {
        return Object.keys(this._entityConstructor._keys);
    };
    UpdateRequestBuilderV2.prototype.toSet = function () {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        var set = new Set();
        Object.values(fields).forEach(function (field) {
            set.add(field._fieldName);
        });
        return set;
    };
    UpdateRequestBuilderV2.prototype.isEmptyObject = function (obj) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;
    };
    return UpdateRequestBuilderV2;
}(request_builder_base_1.MethodRequestBuilderBase));
exports.UpdateRequestBuilderV2 = UpdateRequestBuilderV2;
exports.UpdateRequestBuilder = UpdateRequestBuilderV2;
var removePropertyOnCondition = function (condition) { return function (body) {
    return Object.entries(body).reduce(function (resultBody, _a) {
        var _b;
        var key = _a[0], val = _a[1];
        if (condition([key, val])) {
            return resultBody;
        }
        return __assign(__assign({}, resultBody), (_b = {}, _b[key] = val, _b));
    }, {});
}; };
/*
 * In case the entity contains a navigation to a different entity a warning is printed.
 */
function warnIfNavigation(request, entity, entityConstructor) {
    var setNavigationsProperties = Object.keys(entity).filter(function (key) {
        return !util_1.isNullish(entity[key]) && properties_util_1.isNavigationProperty(key, entityConstructor);
    });
    if (setNavigationsProperties.length) {
        logger.warn("The navigation properties " + setNavigationsProperties + " have been included in your update request. Update of navigation properties is not supported and will be ignored.");
    }
    return request;
}
//# sourceMappingURL=update-request-builder.js.map