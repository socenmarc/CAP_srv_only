import { FieldType } from '../../common/selectable';
import { Filterable } from '../../common/filter';
import { EntityBase } from '../../common';
import { OneToManyLink } from '../../common/selectable/one-to-many-link';
import { FilterLambdaExpression } from '../../common/filter/filter-lambda-expression';
/**
 * Will return the entity if at least one element of the multilink relation fulfills the condition.
 * @param filters - A filter condition like MyEntity.someMultiLink.someProperty.eq('value')
 * @returns The lambda filter function to be considered in the query
 */
export declare function any<EntityT extends EntityBase, LinkedEntityT extends EntityBase>(...filters: (Filterable<EntityT> | OneToManyLink<EntityT, LinkedEntityT>)[]): FilterLambdaExpression<EntityT, FieldType>;
/**
 * Will return the entity if all elements of the multilink relation fulfill the condition.
 * @param filters - A filter condition like MyEntity.someMultiLink.someProperty.eq('value')
 * @returns The lambda filter function to be considered in the query
 */
export declare function all<EntityT extends EntityBase, LinkedEntityT extends EntityBase>(...filters: (Filterable<EntityT> | OneToManyLink<EntityT, LinkedEntityT>)[]): FilterLambdaExpression<EntityT, FieldType>;
//# sourceMappingURL=filter-lambda-expression.d.ts.map