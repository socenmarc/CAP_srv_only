"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchRequestBuilder = void 0;
var request_builder_base_1 = require("../request-builder-base");
var odata_batch_request_config_1 = require("../../request/odata-batch-request-config");
var batch_request_serializer_1 = require("./batch-request-serializer");
/**
 * Create a batch request to invoke multiple requests as a batch. The batch request builder accepts retrieve requests, i. e. [[GetAllRequestBuilder | getAll]] and [[GetByKeyRequestBuilder | getByKey]] requests and change sets, which in turn can contain [[CreateRequestBuilder | create]], [[UpdateRequestBuilder | update]] or [[DeleteRequestBuilder | delete]] requests.
 * The retrieve and change sets will be excuted in order, while the order within a change set can vary.
 */
var BatchRequestBuilder = /** @class */ (function (_super) {
    __extends(BatchRequestBuilder, _super);
    // FIXME: MethodRequestBuilderBase is too broad here. Should be getAll and getByKey
    /**
     * Creates an instance of ODataBatchRequestBuilder.
     *
     * @param defaultServicePath - Service path
     * @param requests - An array of retrieve requests or change sets
     * @param entityToConstructorMap - A map that holds the entity type to constructor mapping
     */
    function BatchRequestBuilder(defaultServicePath, requests, entityToConstructorMap) {
        var _this = _super.call(this, new odata_batch_request_config_1.ODataBatchRequestConfig(defaultServicePath)) || this;
        _this.defaultServicePath = defaultServicePath;
        _this.requests = requests;
        _this.entityToConstructorMap = entityToConstructorMap;
        return _this;
    }
    BatchRequestBuilder.prototype.withSubRequestPathType = function (subRequestPathType) {
        this.requestConfig.withSubRequestPathType(subRequestPathType);
        return this;
    };
    BatchRequestBuilder.prototype.build = function (destination, options) {
        var _this = this;
        return destination
            ? _super.prototype.build.call(this, destination, options)
                .then(function (request) { return _this.setPayload(request); })
            : this.setPayload(_super.prototype.build.call(this));
    };
    BatchRequestBuilder.prototype.setPayload = function (request) {
        request.config.payload = batch_request_serializer_1.serializeBatchRequest(this, {
            subRequestPathType: request.config.subRequestPathType,
            destination: request.destination
        });
        return request;
    };
    return BatchRequestBuilder;
}(request_builder_base_1.MethodRequestBuilderBase));
exports.BatchRequestBuilder = BatchRequestBuilder;
//# sourceMappingURL=batch-request-builder.js.map