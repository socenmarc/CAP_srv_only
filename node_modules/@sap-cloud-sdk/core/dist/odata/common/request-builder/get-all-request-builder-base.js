"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAllRequestBuilderBase = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var request_builder_base_1 = require("../../common/request-builder/request-builder-base");
var count_request_builder_1 = require("../../common/request-builder/count-request-builder");
/**
 * Base class for the get all request builders [[GetAllRequestBuilderV2]] and [[GetAllRequestBuilderV4]]
 *
 * @typeparam EntityT - Type of the entity to be requested
 */
var GetAllRequestBuilderBase = /** @class */ (function (_super) {
    __extends(GetAllRequestBuilderBase, _super);
    /**
     * Creates an instance of GetAllRequestBuilder.
     *
     * @param _entityConstructor - Constructor of the entity to create the request for
     * @param getAllRequestConfig - Request config of the get all request.
     */
    function GetAllRequestBuilderBase(_entityConstructor, getAllRequestConfig) {
        var _this = _super.call(this, getAllRequestConfig) || this;
        _this._entityConstructor = _entityConstructor;
        return _this;
    }
    GetAllRequestBuilderBase.prototype.select = function (first) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        this.requestConfig.selects = util_1.variadicArgumentToArray(first, rest);
        return this;
    };
    GetAllRequestBuilderBase.prototype.orderBy = function (first) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        this.requestConfig.orderBy = util_1.variadicArgumentToArray(first, rest);
        return this;
    };
    /**
     * Limit number of returned entities.
     *
     * @param top - Maximum number of entities to return in the response. Can be less, if less entities match the request
     * @returns The request builder itself, to facilitate method chaining
     */
    GetAllRequestBuilderBase.prototype.top = function (top) {
        this.requestConfig.top = top;
        return this;
    };
    /**
     * Skip number of entities.
     *
     * @param skip - Number of matching entities to skip. Useful for paging
     * @returns The request builder itself, to facilitate method chaining
     */
    GetAllRequestBuilderBase.prototype.skip = function (skip) {
        this.requestConfig.skip = skip;
        return this;
    };
    /**
     * Count the number of entities.
     *
     * @returns A count request builder for execution
     */
    GetAllRequestBuilderBase.prototype.count = function () {
        return new count_request_builder_1.CountRequestBuilder(this);
    };
    return GetAllRequestBuilderBase;
}(request_builder_base_1.MethodRequestBuilderBase));
exports.GetAllRequestBuilderBase = GetAllRequestBuilderBase;
//# sourceMappingURL=get-all-request-builder-base.js.map