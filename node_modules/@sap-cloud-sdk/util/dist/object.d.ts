/**
 * Checks if a chain of properties exists on the given object.
 *
 * @param obj - The object to be checked.
 * @param properties - Chained properties.
 * @returns True if the property chain leads to a truthy value, false otherwise.
 */
export declare function propertyExists(obj: Record<string, any>, ...properties: string[]): boolean;
/**
 * Adds the value to the object if it is neither null nor undefined.
 * Note that this is different to JS idiomatic checks for truthy/falsy values, i.e. an empty string will result in key/value pairs beeing added.
 *
 * @deprecated This will be removed in version 2.0 of the SDK.
 *
 * @param key - The key to associate with the given value.
 * @param value - The value to associate with the given key.
 * @param obj - The object on which to create the association.
 * @returns A copy of the input object with the new key-value pair if the value is neither null nor undefined.
 */
export declare const assocSome: <T>(key: string, value?: any) => (obj: T) => T;
/**
 * Merges the two object if second object is neither null nor undefined.
 * If a key exists on a and b the value from b is taken
 *
 * @deprecated This will be removed in version 2.0 of the SDK.
 *
 * @param a - The object to merge into.
 * @param b - The object which to merge into a.
 * @returns A copy of the merge(a, b) or a if b is undefined or null.
 */
export declare const mergeSome: (a: Record<string, any>, b?: Record<string, any> | undefined) => Record<string, any>;
/**
 * Takes an object and returns a new object whose keys are renamed according to the provided key mapping.
 * Any keys in the input object not present in the key mapping will be present in the output object as-is.
 * If a key in the key mapping is not present in the input object, the output object will contain the key with value "undefined".
 *
 * @param keyMapping - An object mapping keys of the input object to keys of the output object.
 * @param obj - The input object.
 * @returns An object with renamed keys.
 */
export declare const renameKeys: (keyMapping: Record<string, string>, obj: Record<string, any>) => Record<string, any>;
/**
 * Selects  properties of an objects and returns a shallow copy.
 * Non existing keys in the source object are ignored.
 *
 * @param keys - properties to be selected
 * @param obj - object from which the values are taken
 * @returns an object with the selected keys and corresponding values.
 */
export declare const pick: <T>(keys: string[], obj: T) => Partial<T>;
/**
 * Adds a key value pair to the given objects and returns a shallow copy.
 * If the key is already present it will be overwritten.
 *
 * @param key - key to be added
 * @param value - value to be added
 * @param obj - object the key value pair is added to.
 * @returns the object with the key value pair added
 */
export declare const assoc: <T>(key: string, value: any, obj: T) => T & {
    [x: string]: any;
};
/**
 * Flattens a array: [1,[2,[3,4]],5] will become [1,2,3,4,5].
 * Non primitive values are copied by reference.
 *
 * @param input - array to be flattened
 * @returns the flat array.
 */
export declare const flatten: (input: any[]) => any[];
//# sourceMappingURL=object.d.ts.map