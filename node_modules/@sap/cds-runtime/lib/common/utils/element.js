const isAssociationOrComposition = element => element.type === 'cds.Association' || element.type === 'cds.Composition'

const isMandatoryField = element => {
  return (
    ((element['@Common.FieldControl'] && element['@Common.FieldControl']['#'] === 'Mandatory') ||
      element['@Common.FieldControl.Mandatory'] ||
      element['@FieldControl.Mandatory'] ||
      element['@mandatory']) &&
    !isAssociationOrComposition(element)
  )
}

const isReadOnlyFieldControl = element => {
  return (
    (element['@Common.FieldControl'] && element['@Common.FieldControl']['#'] === 'ReadOnly') ||
    element['@Common.FieldControl.ReadOnly'] ||
    element['@FieldControl.ReadOnly'] ||
    element['@readonly']
  )
}

const isComputedReadOnly = element => {
  return element['@Core.Computed']
}

const isOnUpdateOrInsert = element => {
  return element['@cds.on.update'] || element['@cds.on.insert']
}

const isReadOnlyField = element => {
  return (
    element &&
    // keys are intentionally added to data to build queries later on -> not read only for us
    !element.key &&
    (isReadOnlyFieldControl(element) ||
      isComputedReadOnly(element) ||
      isOnUpdateOrInsert(element) ||
      element['virtual'])
  )
}

module.exports = {
  isAssociationOrComposition,
  isMandatoryField,
  isReadOnlyFieldControl,
  isComputedReadOnly,
  isOnUpdateOrInsert,
  isReadOnlyField
}
