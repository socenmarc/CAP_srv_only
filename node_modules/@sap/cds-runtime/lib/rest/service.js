const cds = global.cds || require('@sap/cds/lib')
const { resolveView } = require('../common/utils/resolveView')
const { getKind, run, getDestination, getAdditionalOptions, getReqOptions, postProcess } = require('./utils/service')

const _checkProduction = destination => {
  if (!destination && process.env.NODE_ENV === 'production') {
    throw new Error('In production mode it is required to set `options.destination`')
  }
}

const _setHeaders = (defaultHeaders, req) => {
  // REVISIT: If header "x-cds-incoming-protocol" is not present, custom headers were provided.
  if (req.headers['x-cds-incoming-protocol']) {
    return defaultHeaders
  }

  return Object.assign(defaultHeaders, req.headers)
}

class RestService extends cds.Service {
  init () {
    this.destination = this.options.credentials && this.options.credentials.destination
    this.requestTimeout = this.options.credentials && this.options.credentials.requestTimeout
    if (this.requestTimeout === null || this.requestTimeout === undefined) this.requestTimeout = 60000
    this.path = this.options.credentials && this.options.credentials.path
    this.datasource = this.options.datasource
    this.kind = getKind(this.options) // TODO: Simplify

    _checkProduction(this.destination)

    this.on('*', async (req, next) => {
      let { query } = req
      if (!query && !(typeof req.path === 'string')) return next()
      if (typeof query === 'object' && this.model) query = resolveView(query, this.model, 'RemoteService', true)
      if (!this.destination) this.destination = getDestination(this.model, this.datasource, this.options)
      const reqOptions = getReqOptions(req, query, this)
      reqOptions.headers = _setHeaders(reqOptions.headers, req)
      const additionalOptions = getAdditionalOptions(req, this.destination, this.kind)
      const result = await run(reqOptions, additionalOptions)
      return typeof query === 'object' ? postProcess(query, result) : result
    })
  }
}

module.exports = RestService
