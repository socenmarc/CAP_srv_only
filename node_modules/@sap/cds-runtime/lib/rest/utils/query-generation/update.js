const { generateKeyPath, generateKeysOfWhere, splitByAndGetValueByIndex } = require('./utils')

// REVISIT: Is this still neccessary when .data contains all primitive properties?
const _copyData = data => {
  // only works on flat structures
  const copied = {}
  for (const property in data) {
    copied[property] =
      data[property] && typeof data[property] === 'object' && 'val' in data[property]
        ? data[property].val
        : data[property]
  }

  return copied
}

const update = (cqn, target, type) => {
  const url = generateKeyPath(cqn.UPDATE.entity, type, cqn.UPDATE._transitions)

  if (cqn.UPDATE.where) {
    if (url.keys) {
      throw new Error('Cannot generate URL for UPDATE CQN. Conflicting .from and .where')
    }
    url.keys = `${type === 'rest' ? '/' : ''}${generateKeysOfWhere(cqn.UPDATE.where, type, target)}`
  }

  // TODO: support for .set as well
  const body = _copyData(cqn.UPDATE.data)

  return {
    path: `${splitByAndGetValueByIndex(url.path)}${url.keys || ''}`,
    method: 'PATCH',
    body
  }
}

module.exports = update
