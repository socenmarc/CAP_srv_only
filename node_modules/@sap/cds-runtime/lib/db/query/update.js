const {
  hasDeepUpdate,
  createDeepUpdateCQNs,
  selectDeepUpdateData
} = require('../../common/utils/composition/compositionTree')
const { getFlatArray, processCQNs } = require('../utils/deep')
const { timestampToISO } = require('../data-conversion/timestamp')

const _getFilteredCqns = (cqns, model) => {
  return cqns.filter(cqn => {
    const entity = model && cqn.UPDATE && model.definitions[cqn.UPDATE.entity]
    if (!entity) return true
    // is there a propterty that is not managed or managed but filled by custom handler?
    return Object.keys(cqn.UPDATE.data).some(
      k => entity.elements[k]['@cds.on.update'] === undefined || !cqn.UPDATE.data[k].startsWith('$')
    )
  })
}

const update = (executeUpdateCQN, executeSelectCQN) => async (model, dbc, query, req) => {
  const ts = timestampToISO(req.timestamp)

  if (hasDeepUpdate(model && model.definitions, query)) {
    // REVISIT: _activeData gets set in case of draftActivate for performance, but this is a layer violation
    let selectData = req._ && req._.query && req._.query._activeData
    if (!selectData) {
      // REVISIT: avoid additional read
      const wrapperFn = q => executeSelectCQN(model, dbc, q, req.user.id, req.user.locale, ts)
      selectData = await selectDeepUpdateData(model && model.definitions, query, wrapperFn)
    } else {
      selectData = [selectData]
    }

    let cqns = createDeepUpdateCQNs(model && model.definitions, query, selectData)

    // the delete chunks, i.e., how many deletes can be processed in parallel
    const chunks = []
    for (const each of cqns) chunks.push(each.filter(e => e.DELETE).length)

    // remove queries that only want to update @cds.on.update properties
    cqns = _getFilteredCqns(getFlatArray(cqns), model)

    if (cqns.length === 0) return 0
    const results = await processCQNs(executeUpdateCQN, cqns, model, dbc, req.user.id, req.user.locale, ts, chunks)
    // return number of affected rows of "root cqn", if an update, 1 otherwise (as not update of root but its children)
    if (cqns[0].UPDATE) return results[0]
    return 1
  }

  // REVISIT: don't invoke setters if not needed
  return executeUpdateCQN(model, dbc, query, req.user.id, req.user.locale, ts)
}

module.exports = update
