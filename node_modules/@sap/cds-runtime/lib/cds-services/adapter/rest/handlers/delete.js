const cds = global.cds || require('@sap/cds/lib')

const RestRequest = require('../RestRequest')

const getData = require('../utils/data')
const handleError = require('../utils/handle-error')

module.exports = service => {
  return async (restReq, restRes) => {
    const { _parsed: parsed } = restReq

    const [validationError, data] = getData(parsed, restReq)
    if (validationError) return handleError(validationError, service, restReq, restRes)

    // create tx and set as cds.context
    const tx = service.tx({ user: restReq.user, req: restReq })
    cds.context = tx

    const req = new RestRequest(parsed, data, restReq, restRes, service)

    let err, commit
    try {
      await tx.emit(req)

      commit = true
      await tx.commit(null)
    } catch (e) {
      err = e
      if (!commit) {
        // ignore rollback error, which should never happen
        await tx.rollback(e).catch(() => {})
      }
    } finally {
      if (err) {
        // Hide errors in generic message but log detailed error
        handleError(err, service, restReq, restRes)
      } else {
        // only set status if not yet modified
        if (restRes.statusCode === 200) restRes.status(204)
        restRes.send()
      }
    }
  }
}
