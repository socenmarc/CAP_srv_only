const measurePerformance = require('../../utils/performance')

const { UNAUTHORIZED, FORBIDDEN, getRequiresAsArray } = require('../../../../common/utils/auth')

// REVISIT: remove _UNAUTHORIZED and _FORBIDDEN (for dummy stack)
const _UNAUTHORIZED = Object.assign({ stack: 'n/a' }, UNAUTHORIZED)
const _FORBIDDEN = Object.assign({ stack: 'n/a' }, FORBIDDEN)

module.exports = srv => {
  const requires = getRequiresAsArray(srv.definition)

  return (odataReq, odataRes, next) => {
    const req = odataReq.getBatchApplicationData() ? odataReq.getBatchApplicationData().req : odataReq.getIncomingRequest()
    const { res, user, path } = req

    if (path === '/' || path.endsWith('/$metadata')) {
      // > nothing to do
      return next()
    }

    // in case of $batch we need to challenge directly, as the header is not processed if in $batch response body
    if (user && user._challenges && path.endsWith('/$batch')) {
      res.set('WWW-Authenticate', user._challenges.join(';'))
      return next(_UNAUTHORIZED)
    }

    // check @requires as soon as possible (DoS)
    if (requires.length > 0 && !requires.some(r => user.is(r))) {
      // > unauthorized or forbidden?
      if (user._is_anonymous) {
        if (user._challenges) res.set('WWW-Authenticate', user._challenges.join(';'))
        return next(_UNAUTHORIZED)
      }
      return next(_FORBIDDEN)
    }

    /*
     * .on('request') is the only possibility to set a shared object,
     * that can be used in ATOMICITY_GROUP_START and ATOMICITY_GROUP_END
     */
    if (path.endsWith('/$batch')) {
      odataReq.setApplicationData({ req })
    }

    // in case of batch request with sap-statistics=true also measure performance of batched requests
    if (odataReq.getBatchApplicationData()) {
      measurePerformance(req, res)
    }

    next()
  }
}
