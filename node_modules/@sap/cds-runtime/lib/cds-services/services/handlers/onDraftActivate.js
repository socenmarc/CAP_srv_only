const cds = global.cds || require('@sap/cds/lib')

// REVISIT: should be cds.ql
const { DELETE } = require('../../statements')

const { ensureNoDraftsSuffix, ensureDraftsSuffix } = require('../utils/draftUtils')
const { readAndDeleteKeywords, isActiveEntityRequested } = require('../utils/draftWhereUtils')
const { readDraftCompositionTree } = require('../utils/readDraftCompositionTree')
const { isDraftRootEntity } = require('../utils/compositionTree')
const _isLocked = (InProcessByUser, id) => InProcessByUser && InProcessByUser !== id

const _getDeleteDraftAdminCqn = draftUUID =>
  DELETE.from('DRAFT.DraftAdministrativeData').where([{ ref: ['DraftUUID'] }, '=', { val: draftUUID }])

const _getDeleteRootDraftCqn = (targetName, rootWhere) => DELETE.from(targetName).where(rootWhere)

/**
 * Generic Handler for draftActivate requests.
 * In case of success it triggers an 'UPDATE' or 'CREATE' event.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDraftActivate
 */
const onDraftActivate = service =>
  async function (req) {
    if (
      isActiveEntityRequested(req.query.SELECT.from.ref[0].where || []) ||
      req.query.SELECT.from.ref.length > 2 ||
      !isDraftRootEntity(service.model.definitions, ensureNoDraftsSuffix(req.target.name))
    ) {
      req.reject(400)
    }

    const { draftData, activeData, adminData } = await readDraftCompositionTree(service, req)

    if (!draftData) {
      req.reject(404)
    }

    if (_isLocked(adminData.InProcessByUser, req.user.id)) {
      req.reject(403)
    }

    const deleteDraftAdminCqn = _getDeleteDraftAdminCqn(adminData.DraftUUID)
    const deleteRootDraftCqn = _getDeleteRootDraftCqn(
      ensureDraftsSuffix(req.target.name),
      req.query.SELECT.from.ref[0].where
    )

    // REVISIT: no req.run
    await Promise.all([req.run(deleteDraftAdminCqn), req.run(deleteRootDraftCqn)])

    let query, event
    if (activeData) {
      readAndDeleteKeywords(['IsActiveEntity'], req.query.SELECT.from.ref[0].where)
      event = 'UPDATE'
      // REVSIIT: setting data should be part of ql
      query = cds.ql.UPDATE(req.target).where(req.query.SELECT.from.ref[0].where)
      query.UPDATE.data = draftData
      query._activeData = activeData
    } else {
      event = 'CREATE'
      query = cds.ql.INSERT.into(req.target).entries(draftData)
    }

    // REVISIT: _draftMetadata
    const r = new cds.Request({ event, query, data: draftData, _draftMetadata: adminData })

    // REVISIT: should not be necessary
    r._ = Object.assign(r._, req._)
    r.run = req.run

    return this.emit(r)
  }

// REVISIT: draftActivate -> ACTIVATE

const { ODATA, COMMON } = require('../../../common/constants/annotation')
const _relevant = e => e[ODATA.DRAFT] || e[COMMON.DRAFT_NODE.PREP_ACTION]
module.exports = function () {
  let _handler
  for (const entity of Object.values(this.entities).filter(_relevant)) {
    _handler = _handler || onDraftActivate(this)
    this.on('draftActivate', entity, _handler)
  }
}
