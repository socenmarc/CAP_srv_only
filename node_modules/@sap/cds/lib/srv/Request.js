const Event = require('./Event')

/**
 * Class Request represents requests received via synchronous protocols.
 * It extends its base class Event by methods to return results, errors
 * or info messages.
 */
class Request extends Event {

  reply  (results) { return this.results = results }
  notify (...args) { return this._messages.add (1, ...args) }
  info   (...args) { return this._messages.add (2, ...args) }
  warn   (...args) { return this._messages.add (3, ...args) }
  error  (...args) { return this._errors.add (4, ...args) }
  reject (...args) {
    const e = this.error(...args)
    throw e.stack ? e : Object.assign(new Error,e)
  }


  //
  // Lazily create message collectors for .errors and .messages
  //

  get _errors() { return this.errors = super._errors = new Messages }
  get _messages() {
    if (this.context) return this.messages = super._messages = ( // REVISIT: this is for a draft test to not fail
        this.context._messages || this.context.messages || (this.context.messages = new Messages)
    )
    return this.messages = super._messages = new Messages
  }


  //
  // REVISIT: Legacy stuff...
  //

  diff (...args) {
    const {_service:d} = this.target
    return d ? global.cds.services[d.name]._calculateDiff(this, ...args) : Promise.resolve([])
  }

  // REVISIT: remove after req.statements isn't used anymore in @sap/cds-runtime
  set statements(ql) { super.statements = ql }
  get statements() { return super.statements = global.cds.ql }

  // REVISIT: Used for request logging in cds.server
  // REVISIT: _.odataReq stuff should go into subclass ODataRequest
  get _path() { return super._path = this._.odataReq ? this._.odataReq._url.pathname : this._.req && this._.req.path }
  get _query() { return super._query = this._.odataReq ? this._.odataReq._queryOptions : this._.req && this._.req.query }

}

/**
 * Messages Collector, used for `req.errors` and `req.messages`
 */
class Messages extends Array {
  add (severity, code, message, target, args) { // NOSONAR
    let e // be filled in below...
    if (typeof code === 'object') e = code; else {
      if (typeof code === 'number') e = { code }; else [ code, message, target, args, e ] = [ undefined, code, message, target, {} ]
      if (typeof message === 'object') e = Object.assign(message,e); else {
        if (typeof target === 'object') [ target, args ] = [ undefined, target ]
        if (message) e.message = message //; else if (code) e.message = String(code)
        if (target) e.target = target
        if (args) e.args = args
      }
    }
    if (!e.numericSeverity) e.numericSeverity = severity
    this.push(e)
    return e
  }
}

module.exports = Request
