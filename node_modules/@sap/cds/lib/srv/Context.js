const cds = require ('../index')
const _async_events = { succeeded:1, failed:1, done:1 }
const { EventEmitter } = require('events')
const { inspect } = require('util')

/**
 * This is the base class for `cds.Events` and `cds.Requests`,
 * providing the transaction context nature to all instances.
 * Calling `srv.tx()` without args to start new transacions
 * creates direct instances of this base class.
 */
class EventContext {

  constructor(_) { Object.assign (this,this._=_||{}) }
  toString() { return `${this.event} ${this.path}` }
  [inspect.custom]() { return `${this.constructor.name} ${inspect(this._)}` }


  //
  // Emitting and listening to succeeded / failed / done events
  //

  /** @returns {EventEmitter} */ get emitter() {
    return this._emitter || (this._emitter = this.context ? this.context.emitter : new EventEmitter)
  }

  async emit (event,...args) {
    if (!this._emitter) return
    if (event in _async_events) {
      const all = this._emitter.listeners(event)
      for (const each of all) {
        await each.call(this,...args)
      }
    }
    else return this._emitter.emit (event,...args)
  }

  on (event, listener) {
    return this.emitter.on (event, listener.bind(this))
  }

  prependListener (event, listener) {
    return this.emitter.prependListener (event, listener.bind(this))
  }

  once (event, listener) {
    return this.emitter.once (event, listener.bind(this))
  }

  prependOnceListener (event, listener) {
    return this.emitter.prependOnceListener (event, listener.bind(this))
  }


  //
  // The following properties are inherited from root contexts, if exist...
  //

  set user (user) {
    if (!user) return; else super.user = user
    if (this._.req) Object.defineProperty(user,'_req',{value:this._.req})
  }
  get user() {
    if (this._.user) return this.user = this._.user
    return this.user = this.context ? this.context.user : new cds.User
  }

  get timestamp() {
    return super.timestamp = this.context ? this.context.timestamp : Date.now()
  }


  //
  // Connecting to transactions and request hierarchies
  //

  get _tx() { return undefined }
  set _tx(tx) {
    Object.defineProperty (this,'_tx',{value:tx}) //> can set .tx only once
    const ctx = tx.context
    if (ctx && ctx !== this) {
      this.context = ctx
      // REVISIT: remove this when cdx/cds-runtime#490 is merged
      if (ctx._.req) this._.req = ctx._.req
      if (ctx._.res) this._.res = ctx._.res
      // REVISIT: remove when tests stopped using req.run
      if (!this.run && ctx.run) this.run = ctx.run
      // REVISIT:
      const reqs = ctx._children || (ctx._children = {})
      const all = reqs[tx.name] || (reqs[tx.name] = [])
      all.push(this)
    }
  }


  /** REVISIT: remove -> @deprecated */
  get _model() { return super._model = this._tx && this._tx.model || this.context && this.context._model }
  set _model(m){ super._model = m }
}

module.exports = EventContext
