const cds = require ('@sap/cds-reflect'), {lazified} = cds
require = lazified (module)  // eslint-disable-line


const compile = {

  cdl: function(m,o) { return this.to.csn(m,o) },

  for: lazified ({
    odata: require('./4odata'),
    sql: require('./4sql'),
  }),

  to: lazified ({

    inferred:{ csn: (m,o) => compile.to.csn (m,o,'inferred') },
    xtended:{ csn: (m,o) => compile.to.csn (m,o,'xtended') },
    parsed:{ csn: (m,o) => compile.to.csn (m,o,'parsed') },
    xsn: require('./_xsn'),
    csn: require('./_csn'),

    cdl: require('./2cdl'),
    yml: require('./2yaml'),
    yaml: require('./2yaml'),
    json: require('./2json'),

    sql: require('./2sql'),
    hdi: lazy => compile.to.sql.hdbtable,
    hana: lazy => compile.to.sql.hdbcds,
    hdbcds: lazy => compile.to.sql.hdbcds,
    hdbtable: lazy => compile.to.sql.hdbtable,

    hdbtabledata: require('./2tabledata'),
    serviceinfo: require('./2srvinfo'),
    xsuaa: require('./2xsuaa'),

    edm: require('./2edm'),
    edmx: lazy => compile.to.edm.x,
    'edmx-v2': (csn,o) => compile.to.edmx(csn,{...o,version:'v2'}),
    'edmx-v4': (csn,o) => compile.to.edmx(csn,{...o,version:'v4'}),

  }),

}


const fluent = (m) => ({
  for: { __proto__: _proxy4 (m,compile.for) },
  to: { __proto__: _proxy4 (m,compile.to),
    inferred:{ csn: (o) => compile.to.csn (m,o,'inferred') },
    xtended:{ csn: (o) => compile.to.csn (m,o,'xtended') },
    parsed:{ csn: (o) => compile.to.csn (m,o,'parsed') },
    xsn: (o) => compile.to.xsn (m,o),
    csn: (o) => compile.to.csn (m,o),
  }
})
const _proxy4 = (m,compile_to) => new Proxy (compile_to,{
  ownKeys: (t)=> Reflect.ownKeys(t),
  get: (t,p) => p in t && ((o) => (
    Array.isArray(m) ? compile.to.csn(m,o).then (m => t[p](m,o)) :
    _is_csn(m) ? t[p](m,o) : t[p](compile.to.csn(m,o),o)
  ))
})


const _is_csn = (x) => (x.definitions || x.extensions) && !x.$builtins
module.exports = Object.assign (fluent, compile)

if (!cds.env.features.snapi) {
  if (!global.it) console.warn ('[cds] - features.snapi not set -> using old compiler...') // eslint-disable-line no-console
  require('./old')(compile)
}
