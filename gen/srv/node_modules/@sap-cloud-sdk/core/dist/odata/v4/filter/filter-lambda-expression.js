"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.all = exports.any = void 0;
var filter_1 = require("../../common/filter");
var one_to_many_link_1 = require("../../common/selectable/one-to-many-link");
var filter_lambda_expression_1 = require("../../common/filter/filter-lambda-expression");
/**
 * Will return the entity if at least one element of the multilink relation fulfills the condition.
 * @param filters - A filter condition like MyEntity.someMultiLink.someProperty.eq('value')
 * @returns The lambda filter function to be considered in the query
 */
function any() {
    var filters = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        filters[_i] = arguments[_i];
    }
    return new filter_lambda_expression_1.FilterLambdaExpression(toFilterList(filters), 'any');
}
exports.any = any;
// eslint-disable-next-line valid-jsdoc
/**
 * Will return the entity if all elements of the multilink relation fulfill the condition.
 * @param filters - A filter condition like MyEntity.someMultiLink.someProperty.eq('value')
 * @returns The lambda filter function to be considered in the query
 */
function all() {
    var filters = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        filters[_i] = arguments[_i];
    }
    return new filter_lambda_expression_1.FilterLambdaExpression(toFilterList(filters), 'all');
}
exports.all = all;
function toFilterList(filters) {
    return filter_1.and.apply(void 0, filters.map(function (f) { return (f instanceof one_to_many_link_1.OneToManyLink ? f._filters : f); }));
}
//# sourceMappingURL=filter-lambda-expression.js.map