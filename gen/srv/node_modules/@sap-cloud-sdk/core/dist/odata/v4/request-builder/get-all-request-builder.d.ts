import { EntityV4 } from '../entity';
import { DestinationOptions } from '../../../scp-cf';
import { Destination, DestinationNameAndJwt } from '../../../scp-cf/destination/destination-service-types';
import { EntityIdentifiable, Constructable, Filterable } from '../../common';
import { Expandable } from '../../common/expandable';
import { OneToManyLink } from '../../common/selectable/one-to-many-link';
import { GetAllRequestBuilderBase } from '../../common/request-builder/get-all-request-builder-base';
/**
 * Create an OData request to get multiple entities based on the configuration of the request.
 * A `GetAllRequestBuilder` allows restricting the response in multiple dimensions.
 * The properties available in the response can be restricted by creating a [[GetAllRequestBuilderV2.select selection]], where no selection is equal to selecting all fields of the entity.
 * Navigational properties need to expanded explicitly by [[GetAllRequestBuilderV4.expand]].
 * The entities can be [[GetAllRequestBuilderV2.filter filtered]] and [[GetAllRequestBuilderV2.select ordered]] based on the values of their properties.
 * The number of entities in the result can be [[GetAllRequestBuilderV2.top limited]] and results can be [[GetAllRequestBuilderV2.skip skipped]] for paging purposes.
 * If none of the above mentioned are configured all entities of the given type will be requested.
 *
 * @typeparam EntityT - Type of the entity to be requested
 */
export declare class GetAllRequestBuilderV4<EntityT extends EntityV4> extends GetAllRequestBuilderBase<EntityT> implements EntityIdentifiable<EntityT> {
    readonly _entity: EntityT;
    /**
     * Creates an instance of GetAllRequestBuilder.
     *
     * @param entityConstructor - Constructor of the entity to create the request for
     */
    constructor(entityConstructor: Constructable<EntityT>);
    expand(expands: Expandable<EntityT>[]): this;
    expand(...expands: Expandable<EntityT>[]): this;
    /**
     * Add filter statements to the request.
     *
     * @param expressions - Filter expressions to restrict the response
     * @returns The request builder itself, to facilitate method chaining
     */
    filter(...expressions: (Filterable<EntityT> | OneToManyLink<EntityT, any>)[]): this;
    /**
     * Execute request.
     *
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to the requested entities
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<EntityT[]>;
}
//# sourceMappingURL=get-all-request-builder.d.ts.map