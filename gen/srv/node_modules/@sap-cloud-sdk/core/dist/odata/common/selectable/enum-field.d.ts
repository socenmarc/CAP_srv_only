import { EntityBase, Constructable } from '../entity';
import { ConstructorOrField } from './constructor-or-field';
import { EdmTypeField, SelectableEdmTypeField } from './edm-type-field';
/**
 * Represents a property with a enum value.
 *
 * @typeparam EntityT - Type of the entity the field belongs to
 */
declare class EnumFieldBase<EntityT extends EntityBase> extends EdmTypeField<EntityT, string> {
}
/**
 * Represents a selectable property with a enum value.
 *
 * @typeparam EntityT - Type of the entity the field belongs to
 */
export declare class EnumField<EntityT extends EntityBase> extends EnumFieldBase<EntityT> implements SelectableEdmTypeField {
    readonly selectable: true;
    constructor(fieldName: string, fieldOf: Constructable<EntityT>);
}
/**
 * Represents a complex type property with a enum value.
 *
 * @typeparam EntityT - Type of the entity the field belongs to
 */
export declare class ComplexTypeEnumPropertyField<EntityT extends EntityBase, ComplexT = any> extends EnumFieldBase<EntityT> {
    /**
     * The constructor of the entity or the complex type this field belongs to
     */
    readonly fieldOf: ConstructorOrField<EntityT, ComplexT>;
    /**
     * Creates an instance of ComplexTypeEnumPropertyField.
     *
     * @param fieldName - Actual name of the field used in the OData request
     * @param fieldOf - The constructor of the entity or the complex type this field belongs to
     * @param edmType - Type of the field according to the metadata description
     */
    constructor(fieldName: string, fieldOf: ConstructorOrField<EntityT, ComplexT>);
    /**
     * Path to the field to be used in filter and order by queries. Combines the parent complex type name with the field name.
     *
     * @returns Path to the field to be used in filter and order by queries.
     */
    fieldPath(): string;
}
export {};
//# sourceMappingURL=enum-field.d.ts.map