import { EntityV2 } from '../entity';
import { Constructable } from '../../common';
/**
 * @hidden
 */
export declare function transformReturnValueForUndefinedV2<ReturnT>(data: any, builderFn: (data: any) => ReturnT): ReturnT;
export { transformReturnValueForUndefinedV2 as transformReturnValueForUndefined };
/**
 * @hidden
 */
export declare function transformReturnValueForEntityV2<ReturnT extends EntityV2>(data: any, entityConstructor: Constructable<ReturnT>): ReturnT;
export { transformReturnValueForEntityV2 as transformReturnValueForEntity };
/**
 * @hidden
 */
export declare function transformReturnValueForEntityListV2<ReturnT extends EntityV2>(data: any, entityConstructor: Constructable<ReturnT>): ReturnT[];
export { transformReturnValueForEntityListV2 as transformReturnValueForEntityList };
/**
 * @hidden
 */
export declare function transformReturnValueForComplexTypeV2<ReturnT>(data: any, builderFn: (data: any) => ReturnT): ReturnT;
export { transformReturnValueForComplexTypeV2 as transformReturnValueForComplexType };
/**
 * @hidden
 */
export declare function transformReturnValueForComplexTypeListV2<ReturnT>(data: any, builderFn: (data: any) => ReturnT): ReturnT[];
export { transformReturnValueForComplexTypeListV2 as transformReturnValueForComplexTypeList };
/**
 * @hidden
 */
export declare function transformReturnValueForEdmTypeV2<ReturnT>(data: any, builderFn: (data: any) => ReturnT): ReturnT;
export { transformReturnValueForEdmTypeV2 as transformReturnValueForEdmType };
/**
 * @hidden
 */
export declare function transformReturnValueForEdmTypeListV2<ReturnT>(data: any, builderFn: (data: any) => ReturnT): ReturnT[];
export { transformReturnValueForEdmTypeListV2 as transformReturnValueForEdmTypeList };
//# sourceMappingURL=response-transformers.d.ts.map