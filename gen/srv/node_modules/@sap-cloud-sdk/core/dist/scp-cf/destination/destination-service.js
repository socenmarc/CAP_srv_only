"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchDestination = exports.fetchSubaccountDestinations = exports.fetchInstanceDestinations = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var axios_1 = __importDefault(require("axios"));
var util_2 = require("../../util");
var http_client_1 = require("../../http-client");
var resilience_options_1 = require("../resilience-options");
var destination_1 = require("./destination");
var destination_service_types_1 = require("./destination-service-types");
var destination_service_cache_1 = require("./destination-service-cache");
// For some reason, the equivalent import statement does not work
/* eslint-disable-next-line @typescript-eslint/no-var-requires */
var CircuitBreaker = require('opossum');
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'destination-service'
});
/**
 * Fetches all instance destinations from the given URI.
 *
 * @param destinationServiceUri - The URI of the destination service
 * @param jwt - The access token
 * @param options - Options to use by retrieving destinations
 * @returns A promise resolving to a list of instance destinations
 */
function fetchInstanceDestinations(destinationServiceUri, jwt, options) {
    return fetchDestinations(destinationServiceUri, jwt, destination_service_types_1.DestinationType.Instance, options);
}
exports.fetchInstanceDestinations = fetchInstanceDestinations;
/**
 * Fetches all subaccount destinations from the given URI.
 *
 * @param destinationServiceUri - The URI of the destination service
 * @param jwt - The access token
 * @param options - Options to use by retrieving destinations
 * @returns A promise resolving to a list of subaccount destinations
 */
function fetchSubaccountDestinations(destinationServiceUri, jwt, options) {
    return fetchDestinations(destinationServiceUri, jwt, destination_service_types_1.DestinationType.Subaccount, options);
}
exports.fetchSubaccountDestinations = fetchSubaccountDestinations;
function fetchDestinations(destinationServiceUri, jwt, type, options) {
    return __awaiter(this, void 0, void 0, function () {
        var targetUri, destinationsFromCache;
        return __generator(this, function (_a) {
            targetUri = destinationServiceUri.replace(/\/$/, '') + "/destination-configuration/v1/" + type + "Destinations";
            if (options === null || options === void 0 ? void 0 : options.useCache) {
                destinationsFromCache = destination_service_cache_1.destinationServiceCache.retrieveDestinationsFromCache(targetUri, util_2.decodeJwt(jwt), options.isolationStrategy);
                if (destinationsFromCache) {
                    return [2 /*return*/, destinationsFromCache];
                }
            }
            return [2 /*return*/, callDestinationService(targetUri, jwt, options)
                    .then(function (response) {
                    var destinations = response.data.map(function (d) {
                        return destination_1.parseDestination(d);
                    });
                    if (options === null || options === void 0 ? void 0 : options.useCache) {
                        destination_service_cache_1.destinationServiceCache.cacheRetrievedDestinations(targetUri, util_2.decodeJwt(jwt), destinations, options.isolationStrategy);
                    }
                    return destinations;
                })
                    .catch(function (error) {
                    return Promise.reject(util_1.errorWithCause("Failed to fetch " + type + " destinations." + errorMessageFromResponse(error), error));
                })];
        });
    });
}
/**
 * Fetches a specific destination by name from the given URI, including authorization tokens.
 * For destinations with authenticationType OAuth2SAMLBearerAssertion, this call will trigger the OAuth2SAMLBearerFlow against the target destination.
 *
 * @param destinationServiceUri - The URI of the destination service
 * @param jwt - The access token
 * @param destinationName - The name of the desired destination
 * @param options - Options to use by retrieving destinations
 * @returns A Promise resolving to the destination
 */
function fetchDestination(destinationServiceUri, jwt, destinationName, options) {
    return __awaiter(this, void 0, void 0, function () {
        var targetUri, destinationsFromCache;
        return __generator(this, function (_a) {
            targetUri = destinationServiceUri.replace(/\/$/, '') + "/destination-configuration/v1/destinations/" + destinationName;
            if (options === null || options === void 0 ? void 0 : options.useCache) {
                destinationsFromCache = destination_service_cache_1.destinationServiceCache.retrieveDestinationsFromCache(targetUri, util_2.decodeJwt(jwt), options.isolationStrategy);
                if (destinationsFromCache) {
                    if (destinationsFromCache.length > 1) {
                        logger.warn('More than one destination found in the cache. This should not happen. First element used.');
                    }
                    return [2 /*return*/, destinationsFromCache[0]];
                }
            }
            return [2 /*return*/, callDestinationService(targetUri, jwt, options)
                    .then(function (response) {
                    var destination = destination_1.parseDestination(response.data);
                    if (options === null || options === void 0 ? void 0 : options.useCache) {
                        destination_service_cache_1.destinationServiceCache.cacheRetrievedDestinations(targetUri, util_2.decodeJwt(jwt), [destination], options.isolationStrategy);
                    }
                    return destination;
                })
                    .catch(function (error) {
                    return Promise.reject(util_1.errorWithCause("Failed to fetch destination " + destinationName + "." + errorMessageFromResponse(error), error));
                })];
        });
    });
}
exports.fetchDestination = fetchDestination;
function errorMessageFromResponse(error) {
    return util_1.propertyExists(error, 'response', 'data', 'ErrorMessage')
        ? " " + error.response.data.ErrorMessage
        : '';
}
function callDestinationService(uri, jwt, options) {
    if (options === void 0) { options = { enableCircuitBreaker: true }; }
    var config = __assign(__assign({}, http_client_1.getAxiosConfigWithDefaults()), { url: uri, headers: util_2.wrapJwtInHeader(jwt).headers });
    if (options.enableCircuitBreaker ||
        options.enableCircuitBreaker === undefined) {
        return getInstanceCircuitBreaker().fire(uri, config);
    }
    return axios_1.default.request(config);
}
function getInstanceCircuitBreaker(breaker) {
    return typeof breaker === 'undefined'
        ? new CircuitBreaker(axios_1.default.get, resilience_options_1.circuitBreakerDefaultOptions)
        : breaker;
}
//# sourceMappingURL=destination-service.js.map