const cds = global.cds || require('@sap/cds/lib')
const DRAFT_COLUMNS = ['IsActiveEntity', 'HasDraftEntity', 'HasActiveEntity']

const { isSingleton } = require('../../common/utils/csn')

const _defaultOrders = (entity, addKeysToOrder) => {
  const defaultOrders = entity['@cds.default.order'] || entity['@odata.default.order'] || []

  if (!cds._deprecationWarningForDefaultSort && defaultOrders.length > 0) {
    console.warn(
      `[cds] Annotation ${
        entity['@cds.default.order'] ? '@cds.default.order' : '@odata.default.order'
      } is deprecated and will be removed`
    )
    cds._deprecationWarningForDefaultSort = true
  }

  const ordersFromKeys = addKeysToOrder
    ? Object.keys(entity.elements)
      .filter(
        keyName =>
          entity.elements[keyName].key &&
            !entity.elements[keyName].is2one &&
            !DRAFT_COLUMNS.includes(keyName) &&
            !defaultOrders.some(o => o.by['='] === keyName)
      )
      .map(keyName => ({ by: { '=': keyName } }))
    : []

  if (entity.query && entity.query.SELECT && entity.query.SELECT.orderBy) {
    const orderBy = entity.query.SELECT.orderBy
    const ordersFromView = orderBy.map(keyName => ({ by: { '=': keyName.ref[0] }, desc: keyName.sort === 'desc' }))
    return [...ordersFromView, ...defaultOrders, ...ordersFromKeys]
  }
  return [...defaultOrders, ...ordersFromKeys]
}

/**
 * 1. query options --> already set in req.query
 * 2. orders from view || @cds.default.order/@odata.default.order
 * 3. orders from keys if singleton or limit is set
 */
const _handler = req => {
  const select = req.query.SELECT

  // do not sort for /$count queries or queries only using aggregations
  if (select.columns && select.columns.length && select.columns.every(col => col.func)) {
    return
  }

  const addKeysToOrder = isSingleton(req.target) || select.limit
  let defaultOrders = _defaultOrders(req.target, addKeysToOrder)

  // remove defaultOrder if not part of group by
  if (select.groupBy && select.groupBy.length > 0) {
    defaultOrders = defaultOrders.filter(d => {
      return select.groupBy.find(e => e.ref[0] === d.by['='])
    })
  }

  select.orderBy = select.orderBy || []
  for (const defaultOrder of defaultOrders) {
    if (
      !select.orderBy.some(orderBy => {
        // don't add duplicates
        return orderBy.ref && orderBy.ref.length === 1 && orderBy.ref[0] === defaultOrder.by['=']
      })
    ) {
      const orderByItem = { ref: [defaultOrder.by['=']], sort: defaultOrder.desc ? 'desc' : 'asc' }
      select.orderBy.push(orderByItem)
    }
  }
}

/*
 * handler registration
 */
/* istanbul ignore next */
module.exports = function () {
  _handler._initial = true
  this.before('READ', '*', _handler)
}

// REVISIT: remove (currently needed for test)
module.exports.handler = _handler
