const {
  uri: {
    UriResource: {
      ResourceKind: { ENTITY_COLLECTION, NAVIGATION_TO_MANY }
    }
  }
} = require('../../cds-services/adapter/odata-v4/okra/odata-server')

const { skipToken } = require('../../cds-services/adapter/odata-v4/utils/request')
const { addLimit } = require('../../cds-services/adapter/odata-v4/odata-to-cqn/utils')

const _getPageSizes = uriInfo => {
  // REVISIT: how not to use internal property _configuration?
  const target =
    uriInfo.getLastSegment().getKind() === NAVIGATION_TO_MANY
      ? uriInfo.getLastSegment().getTarget()
      : uriInfo.getLastSegment().getEntitySet() || {}

  // target === null if view with parameters
  const { defaultPageSize, maxPageSize } = (target && target._configuration) || {}
  return { defaultPageSize, maxPageSize }
}

const _getOffset = (offset, incomingSkipToken) => {
  return (offset || 0) + incomingSkipToken
}

const _getMaxRows = (rows, maxPageSize, incomingSkipToken) => {
  if (incomingSkipToken > 0) {
    const tooMuch = rows - maxPageSize

    if (tooMuch < 1) {
      return rows
    }

    if (tooMuch > maxPageSize) {
      return maxPageSize
    }

    return tooMuch
  }

  if (rows > maxPageSize) {
    return maxPageSize
  }

  return rows || 0
}

/**
 * The handler is actually odata specific, but we do not have the possibility
 * to register handlers if served via a certain protocol
 */
const _handler = req => {
  if (!req._.odataReq) return

  const uriInfo = req._.odataReq.getUriInfo()
  const kind = uriInfo.getLastSegment().getKind()
  const isCollectionOrToMany = kind === ENTITY_COLLECTION || kind === NAVIGATION_TO_MANY
  if (isCollectionOrToMany) {
    const cqn = req.query

    const { defaultPageSize, maxPageSize } = _getPageSizes(uriInfo)

    const incomingSkipToken = skipToken(uriInfo)
    const limit = cqn.SELECT.limit

    if (limit) {
      const rows = maxPageSize && _getMaxRows(limit.rows ? limit.rows.val : undefined, maxPageSize, incomingSkipToken)
      const offset = _getOffset(limit.offset ? limit.offset.val : undefined, incomingSkipToken)
      addLimit(cqn.SELECT, rows, offset)
    } else {
      addLimit(cqn.SELECT, defaultPageSize, incomingSkipToken)
    }
  }
}

/*
 * handler registration
 */
/* istanbul ignore next */
module.exports = function () {
  _handler._initial = true

  this.before('READ', '*', _handler)
}
