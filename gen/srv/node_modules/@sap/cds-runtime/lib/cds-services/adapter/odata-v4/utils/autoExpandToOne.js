const cds = global.cds || require('@sap/cds/lib')

const addAssociationToRow = (row, foreignKey, elements) => {
  const assocName = elements[foreignKey]['@odata.foreignKey4']
  const assoc = elements[assocName]

  if (!row[assocName]) {
    row[assocName] = {}
  }

  const keyOfAssociatedEntity = foreignKey.replace(`${assocName}_`, '')

  if (assoc._target.keys[keyOfAssociatedEntity]['@odata.foreignKey4']) {
    // assoc as key
    row[assocName][keyOfAssociatedEntity] = row[foreignKey]
    delete row[foreignKey]
    addAssociationToRow(row[assocName], keyOfAssociatedEntity, assoc._target.elements)
    return
  }

  // foreign key null or undefined, set assoc to null
  if (row[foreignKey] == null) {
    row[assocName] = null
    delete row[foreignKey]
    return
  }

  if (row[assocName][keyOfAssociatedEntity] === undefined) {
    row[assocName][keyOfAssociatedEntity] = row[foreignKey]
  }

  delete row[foreignKey]
}

const isAssocOrComp = e => e.is2one || e.is2many
const isToReturn = (row, entityEl) => typeof row !== 'object' || !entityEl
const isStructured = element => element.elements

const _sanitizeRow = (entity, element, row) => {
  if (entity.elements[element]['@odata.foreignKey4']) {
    addAssociationToRow(row, element, entity.elements)
  }
  // compiler adds this flag to generated foreign keys of managed aspects in containment mode
  if (entity.elements[element]['@odata.containment.ignore']) {
    delete row[element]
  }

  // assoc or comp is not null, autoExpand as well
  if (isAssocOrComp(entity.elements[element]) && row[element] !== null) {
    autoExpandToOneAssociations(entity.elements[element]._target, row[element])
  }

  if (isStructured(entity.elements[element]) && row[element] !== null) {
    autoExpandToOneAssociations(entity.elements[element], row[element])
  }
}

const autoExpandToOneAssociations = (entity, result) => {
  if (result === null || result === '') {
    return
  }

  if (!Array.isArray(result)) {
    return autoExpandToOneAssociations(entity, [result])
  }

  // REVISIT use template mechanism here
  for (const row of result) {
    for (const e of Object.keys(row)) {
      if (isToReturn(row, entity.elements[e])) {
        return
      }
      _sanitizeRow(entity, e, row)
    }
  }
}

module.exports = autoExpandToOneAssociations

if (!cds.env.effective || !cds.env.effective.odata.refs) {
  module.exports = () => {}
}
