const { ensureNoDraftsSuffix } = require('../common/utils/draft.js')

const convertDateTimeElements = (entry, { name, type, _target }, model) => {
  if (!(entry[name] === undefined || entry[name] === null)) {
    if ((type === 'cds.DateTime' || type === 'cds.Timestamp') && entry[name] !== '$now') {
      entry[name] = new Date(entry[name]).toISOString()
      if (type === 'cds.DateTime') {
        entry[name] = `${entry[name].slice(0, 19)}Z`
      }
    }

    if (type === 'cds.Composition') {
      convert({ target: _target, data: entry[name] }, model)
    }
  }
}

const _convertEntries = (data, elements, model) => {
  // check all entries
  for (const entry of data) {
    for (const column of Object.keys(entry)) {
      // skip unknown columns
      if (!elements[column]) continue

      convertDateTimeElements(entry, elements[column], model)
    }
  }
}

/**
 * This method finds and converts the cds.DateTime and cds.Timestamp types to UTC.
 * HANA stores date time values without timezone
 * @param req - cds.Request
 * @returns {undefined}
 */
const convert = function (req, model) {
  if (typeof req.query === 'string' || !req.target) return
  if (!req.data) return // in case of insert as select

  // for recursion
  if (!model) model = this.model
  let elements = req.target.elements
  if (req.target._unresolved) {
    const activeName = req.target.name && ensureNoDraftsSuffix(req.target.name)
    if (model.definitions[activeName]) {
      elements = model.definitions[activeName].elements
    } else {
      return
    }
  }

  const data = Array.isArray(req.data) ? req.data : [req.data]
  _convertEntries(data, elements, model)
}

convert._initial = true

module.exports = convert
