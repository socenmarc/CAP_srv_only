if (global.cds) Object.assign(module,{exports:global.cds}) ; else {

  class Iterable { *[Symbol.iterator]() {for (let e in this) yield this[e]}}
  const core = require ('@sap/cds-reflect/lib'), { extend, lazified } = core
  require = lazified (module)  // eslint-disable-line

  /** cds is the central facade to all cds functions */
  const cds = module.exports = global.cds = extend (core) .with ({

    // Loading and Compiling Models
    get: require ('./compile/from-files'), load: lazy => cds.get.inferred,
    parse: require ('./compile/parse'),
    compile: require ('./compile'),
    model: undefined,

    // Providing and Consuming Services
    services: new Iterable,
    service: require ('./srv'),
    connect: require ('./srv/connect'),
    serve: require ('./srv/serve'),
    server: require ('../server'),
    deploy: require ('./srv/db/deploy'),

    // Core Services API
    ApplicationService: lazy => module.require('@sap/cds-runtime/lib/cds-services/services/Service.js'),
    MessagingService: lazy => module.require('@sap/cds-runtime/lib/messaging/service.js'),
    DatabaseService: lazy => module.require('@sap/cds-runtime/lib/db/Service.js'),
    RemoteService: lazy => module.require('@sap/cds-runtime/lib/rest/service.js'),
    Service: require ('./srv/Service'),
    Request: require ('./srv/Request'),
    Event: require ('./srv/Event'),
    User: require ('./srv/User'),
    ql: require ('./ql'),

    // Helpers
    localize: require ('./utils/i18n'),
    resolve: require ('./utils/resolve'),
    debug: require ('./utils/debug'),
    error: require ('./utils/errors'),
    exec: require ('../bin/cds'),
    test: require ('./utils/tests'),
    utils: require ('./utils/fs'),

    // Configuration & Information
    env: require ('./env'),
    get requires(){ return this.env.requires }, // shortcut
    version: lazy => module.require('../package.json').version,
    home: lazy => __dirname.slice(0,-4),

    /** @return {import './srv/Request'} */
    get context(){ return module.require('./utils/cls').for(this) },
    set context(v){ module.require('./utils/cls').for(this,v) },
  })

  /** @type {import './srv/Service'} */
  let db = new Proxy ({},{ get:function _(t,p){ cds.error.no_primary_db(p,_) }})
  const _missing = db
  extend (cds.__proto__) .with ({

      set db(v) { db = v || _missing; if(v) {
        super.tx = db.tx.bind(db)
        super.run = db.run.bind(db)
        super.read = db.read.bind(db)
        super.insert = db.insert.bind(db)
        super.update = db.update.bind(db)
        super.delete = db.delete.bind(db)
      } else {
        super.tx = ()=>db.tx()
        super.run = ()=>db.run()
        super.read = ()=>db.read()
        super.insert = ()=>db.insert()
        super.update = ()=>db.update()
        super.delete = ()=>db.delete()
      }},

      get db() { return db === _missing ? undefined : db },
      get entities() { return db.entities },
      transaction(..._) { return db.transaction(..._) },
      tx(..._) { return db.tx(..._) },
      run(..._) { return db.run(..._) },
      foreach(..._) { return db.foreach(..._) },
      stream(..._) { return db.stream(..._) },
      read(..._) { return db.read(..._) },
      insert(..._) { return db.insert(..._) },
      update(..._) { return db.update(..._) },
      delete(..._) { return db.delete(..._) },
      disconnect(..._) { return db.disconnect(..._) }

  })

  // legacy and to be moved stuff -> hidden for tools in cds.__proto__
  extend (cds.__proto__) .with (lazified ({
    in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
    get alpha_localized() { return module.require('./alpha/_localized') },
    get session() { return cds.db },
    get options() { return cds.db && cds.db.options },
    get unfold() { return cds.compile },
    get config() { return cds.env },
    build: require('./build'),
    mtx: require('./mtx'),
  }))

  // Add global forwards to cds.ql
  !['SELECT','INSERT','UPDATE','DELETE','CREATE','DROP'].forEach (p => Reflect.defineProperty (global, p, {get(){ // NOSONAR
    const v = this.cds && this.cds.ql[p]
    Object.defineProperty (this,p,{value:v})
    return v
  }, configurable: true }))

}
