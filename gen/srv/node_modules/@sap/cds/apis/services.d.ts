import { SELECT, INSERT, UPDATE, DELETE, Query, ConstructedQuery } from './ql'
import { LinkedModel, Definition, Definitions } from '@sap/cds-reflect/apis/reflected'
import { csn, type } from "@sap/cds-reflect/apis/csn"
// import { Service } from './cds'


export class QueryAPI {
	read <T>(entity : Definition | string) : SELECT<T>
	insert <T>(entity : Definition | string) : INSERT<T>
	update <T>(entity : Definition | string) : UPDATE<T>
	delete <T>(entity : Definition | string) : DELETE<T>
	run (block : (tx:Transaction) => void) : Promise<ResultSet | any>
	run (query : ConstructedQuery) : Promise<ResultSet | any>
	run (query : Query) : Promise<ResultSet | any>
	foreach (query : Query, callback: (row:object) => void) : this

	/** Starts or joins a transation
	 * @see [docs](https://cap.cloud.sap/docs/node.js/api#transactions)
	 */
	transaction (context : object) : Transaction
	tx (context : object) : Transaction
}

/** Class cds.Service --- instances are obtained through `cds.connect` or `cds.serve`.  */
export class Service extends QueryAPI {

	constructor (name:String, model: csn, options: {
		kind: String
		impl: String | ServiceImpl
	})

	/** The model from which the service's definition was loaded */
	model: LinkedModel

	/** Provides access to the entities exposed by a service
	 * @see [capire](https://cap.cloud.sap/docs/node.js/api#srv-entities)
	 */
	entities: Definitions & ((namespace: string) => Definitions)

	/** Provides access to the types exposed by a service
	 * @see [capire](https://cap.cloud.sap/docs/node.js/api#srv-entities)
	 */
	types: Definitions & ((namespace: string) => Definitions)

	/**
	 * Acts like a parameter-less constructor. Ensure to call await super.init() to have the base class’s handlers added.
	 * You may register own handlers before the base class’s ones, to intercept requests before the default handlers snap in.
	 * @see [docs](https://cap.cloud.sap/docs/node.js/api#cds-service-subclasses)
	 */
	init() : Promise<void>

	// Messaging API
	emit (eve: Events, entity: Target, data?: object) : this
	emit (eve: Events, data?: object) : this

	// Provider API
  prepend (fn: ServiceImpl): this
  on (eve: Events, entity: Target, handler: OnEventHandler): this
  on (eve: Events, handler: OnEventHandler): this
  onSucceeded (eve: Events, entity: Target, handler: EventHandler): this
  onSucceeded (eve: Events, handler: EventHandler): this
  onFailed (eve: Events, entity: Target, handler: EventHandler): this
  onFailed (eve: Events, handler: EventHandler): this
  before (eve: Events, entity: Target, handler: EventHandler): this
  before (eve: Events, handler: EventHandler): this
  after (eve: Events, entity: Target, handler: ResultsHandler): this
  after (eve: Events, handler: ResultsHandler): this
  reject (eves: Events, ...entity: Target[]): this
  dispatch (msg: EventMessage): any

}

export interface Transaction extends QueryAPI {
	commit() : Promise<void>
	rollback() : Promise<void>
}

export class DatabaseService extends Service {
	deploy (model?: csn | string) : Promise<csn>
	begin() : Promise<void>
	commit() : Promise<void>
	rollback() : Promise<void>
}

export interface ResultSet extends Array<{}> {}

export class cds_facade {
	Service : typeof Service
	ApplicationService : typeof Service
	RemoteService : typeof Service
	MessagingService : typeof Service
	DatabaseService : typeof DatabaseService
}


export interface ServiceImpl {
	( this: Service, srv: Service ) : any
}

export interface EventHandler {
	// (msg : EventMessage) : Promise<any> | any | void
	(req : Request) : Promise<any> | any | void
}

export interface OnEventHandler {
	(req : Request, next: Function) : Promise<any> | any | void
}

interface ResultsHandler {
	(results : any[]) : void
	(each : any) : void
}

interface EventMessage {
	event : string
	data : any
}

interface Request extends EventMessage {
	target : Definition
	query : Query
	reply() : void
	error() : void
	reject() : void
}

type Events = Event | Event[]
type Event = ( CRUD | TX | HTTP | DRAFT ) & CustomOp
type CRUD = 'CREATE' | 'READ' | 'UPDATE' | 'DELETE'
type DRAFT = 'NEW' | 'EDIT' | 'PATCH' | 'SAVE'
type HTTP = 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE'
type TX = 'COMMIT' | 'ROLLBACK'
type CustomOp = string
type Target = string | Definition
